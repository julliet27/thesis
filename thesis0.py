# -*- coding: utf-8 -*-
"""thesis0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13j7IHloi-cil4A111ca0D1ViZbjBvyu1
"""

#global variable
import re
scoping={}
lst=[]

def pattern_match(string):
    func="^(int|string|char|float|double|void|long long int|unsigned long long int|unsigned int)(.+)*"
    loop="^(for|while|do)(.+)"
    condition="^(if|elseif)(.+)"
    go_to="^(return)(.+)"
    matching=[]
    if(len(re.findall(func,string))>0):
        if ";" not in re.findall(func,string)[0][1]:
            matching=["func",re.findall(func,string)[0][1]]
        else:
            matching=["init",re.findall(func,string)[0][1]]
    elif(len(re.findall(loop,string))>0):
        matching=["loop",re.findall(loop,string)[0][1]]
    elif(len(re.findall(condition,string))>0):
        matching=["condintion",re.findall(condition,string)[0][1]]
    elif(len(re.findall(go_to,string))>0):
        matching=["return",re.findall(go_to,string)[0][1]]
    if(len(matching)>0): return matching
    return "0"

def scope():
    stk=[]
    for i in range(len(lst)):
        if "{" in lst[i]:
            if(len(lst[i])==1): stk.append(i-1)
            else: stk.append(i)
        if "}" in lst[i]:
            tmp=stk[-1]
            scoping[tmp]=i
            stk.pop()

    for i in range(len(lst)):
        if "for" in lst[i] or "while" in lst[i]:
            if "{" not in lst[i]:
                if lst[i][0]!="{":
                    scoping[i]=i
        if "if" in lst[i] or "else if" in lst[i]:
            if "{" not in lst[i]:
                if lst[i][0]!="{":
                    scoping[i]=i
        if "else" in lst[i]:
            if "{" not in lst[i]:
                if lst[i][0]!="{":
                    scoping[i]=i

def code_separation(string):
    not_necessary=[">=","<=",">","<","==","=","!="]
    bracket=["(",")","{","}",","]
    tmp_lst=[]
    tmp_string=""
    i=0
    while(i<len(string)):
        if string[i] in bracket:
            if len(tmp_string)>0 and tmp_string not in tmp_lst: tmp_lst+=[tmp_string]
            tmp_string=""
        # elif(string[i]=="="):
        #     if len(tmp_string)>0 and tmp_string not in tmp_lst: tmp_lst+=[tmp_string]
        #     tmp_lst+=["="]
        #     tmp_string=""
        #elif string[i] in not_necessary:tmp_string+=" ";
        elif string[i:i+2]=="&&" or string[i:i+2]=="||":
            if(len(tmp_string)>0):tmp_lst+=[tmp_string]
            tmp_string=""
            i+=1
        elif string[i]==";":
            if(len(tmp_string)>0 and tmp_string not in tmp_lst):tmp_lst+=[tmp_string]
        else: tmp_string+=string[i]
        i+=1
    if len(tmp_string)>0 and tmp_string not in tmp_lst: tmp_lst+=[tmp_string]
    return tmp_lst

def code_simplify(string):
    arithmetic=["+","-","*","-"]
    s_arithmetic=["++","--"]
    relation=["<=",">=","==",">","<","!="]
    tmp_string=""
    i=0
    if(pattern_match(string)!="0"): return pattern_match(string)[1]
    while(i<len(string)):
        if(string[i:i+2] in relation):
            tmp_string+=" "
            i+=1
        elif(string[i:i+2] in s_arithmetic or string[i:i+2] in s_arithmetic):
            tmp_string+=" "
            tmp_string+="= "
            tmp_string+="1"
            i+=1
        i+=1

input=open("input2.txt","r").read()

string=""
for i in input:
    if i!=" ":
        if i=="\n":
            if "//" in string or "#" in string or len(string)==0:
                string=""
                pass
            else:
                string=string.strip()
                if(len(string)!=0 and "cin" not in string and "cout" not in string):
                    lst.append(string)
                    string=""
        else:
            string+=i

tmp_lst=[]
for i in lst:
    tmp=pattern_match(i)
    if(tmp=="0"):
        print(i)
        a=code_separation(i)
        if(len(a)>0): tmp_lst+=[a]
    else:
        print(tmp)
        split_lst=tmp[1].split(";")
        for j in split_lst:
            a=code_separation(j)
            if len(a)>0: tmp_lst+=[[tmp[0]]+a]

# for i in tmp_lst:
#     for j in i:
#         print(i,code_simplify(j))